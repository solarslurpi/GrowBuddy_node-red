[
    {
        "id": "b2b2cf3fbcec5eed",
        "type": "tab",
        "label": "SB incoming readings flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a7f76a515c8544a2",
        "type": "tab",
        "label": "SB UI Grafana flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e276300d7cbaa457",
        "type": "tab",
        "label": "SB UI Buddy Stuff Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f8b9694fdc50d17f",
        "type": "tab",
        "label": "Turn S3 on/off",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7f5b70e481620d6e",
        "type": "subflow",
        "name": "SB - Error Check",
        "info": "",
        "category": "",
        "in": [
            {
                "x": -20,
                "y": 80,
                "wires": [
                    {
                        "id": "34247234f0668477"
                    },
                    {
                        "id": "35956015b760807c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1380,
                "y": 40,
                "wires": [
                    {
                        "id": "23104b00346c1d1f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "299ed8b77420c170",
        "type": "subflow",
        "name": "SB - influxdb and grafana",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 240,
                "y": 300,
                "wires": [
                    {
                        "id": "73136c801db1d7fa"
                    },
                    {
                        "id": "ab4f06407c0edae6"
                    },
                    {
                        "id": "6d28b3d4d68d0354"
                    },
                    {
                        "id": "30145a16f0cec555"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "dd5b4280471fc9a9",
        "type": "group",
        "z": "b2b2cf3fbcec5eed",
        "name": "Incoming Sniffer Buddy Readings via mqtt",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "f581f181cd9850c5",
            "bc065d6677b1f46b",
            "16f1e159dc4f3e84",
            "6a9a0ec21f3d6810",
            "840d20f7b8b2844b",
            "fbeb377931dbc8e2",
            "b6f864048abe85d4",
            "07098a2be29dd344",
            "f41c631bb0e33bf4",
            "504e5db12d254cbb",
            "eb121a6b1c64fc57",
            "6c18c78d2e27e1d1",
            "91d6114c8d9f582b",
            "573be0a2b1ea622e",
            "863490e53bc7a204",
            "e8c381448de3c5aa",
            "60d37fa549693ae8"
        ],
        "x": -6,
        "y": 219,
        "w": 1572,
        "h": 302
    },
    {
        "id": "77fed1c377eed3df",
        "type": "mqtt-broker",
        "name": "growbuddy",
        "broker": "growbuddy",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "120",
        "cleansession": true,
        "birthTopic": "stat/plug_fillerup/POWER",
        "birthQos": "0",
        "birthPayload": "ON",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "2a76ce87b12bff46",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#37adb3",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#37adb3",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#66cbd0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#37adb3",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Sniffer Buddy",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "ab7d13904246734b",
        "type": "influxdb",
        "hostname": "growbuddy",
        "port": "8086",
        "protocol": "http",
        "database": "growbuddy",
        "name": "growbuddy",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "d1840c4451e46f7b",
        "type": "ui_group",
        "name": "Readings",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bbc3532f.41ca7",
        "type": "ui_group",
        "name": "Readings",
        "tab": "1ff97cd4.681d5b",
        "order": 2,
        "disp": true,
        "width": 16,
        "collapse": false,
        "className": ""
    },
    {
        "id": "1ff97cd4.681d5b",
        "type": "ui_tab",
        "name": "Sniffer Buddy",
        "icon": "dashboard",
        "order": 37,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "83aa45e7.130ea8",
        "type": "ui_group",
        "name": "test",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "7a0c3262d7dd5dc0",
        "type": "ui_group",
        "name": "Buddy Stuff",
        "tab": "1ff97cd4.681d5b",
        "order": 1,
        "disp": true,
        "width": 16,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8e01c20277d826dd",
        "type": "ui_spacer",
        "z": "a7f76a515c8544a2",
        "name": "spacer",
        "group": "7a0c3262d7dd5dc0",
        "order": 2,
        "width": 14,
        "height": 1
    },
    {
        "id": "f11f14b1d07cabab",
        "type": "ui_spacer",
        "z": "a7f76a515c8544a2",
        "name": "spacer",
        "group": "bbc3532f.41ca7",
        "order": 1,
        "width": 2,
        "height": 1
    },
    {
        "id": "4c802cf8f5d8f03a",
        "type": "ui_spacer",
        "z": "a7f76a515c8544a2",
        "name": "spacer",
        "group": "bbc3532f.41ca7",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "f62d27a6ad581772",
        "type": "ui_spacer",
        "z": "a7f76a515c8544a2",
        "name": "spacer",
        "group": "bbc3532f.41ca7",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "2cd9151ed2a112d4",
        "type": "ui_spacer",
        "z": "a7f76a515c8544a2",
        "name": "spacer",
        "group": "bbc3532f.41ca7",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "ec6953a3d013f77d",
        "type": "ui_spacer",
        "z": "a7f76a515c8544a2",
        "name": "spacer",
        "group": "bbc3532f.41ca7",
        "order": 9,
        "width": 3,
        "height": 1
    },
    {
        "id": "e16e06ca.f38438",
        "type": "ui_group",
        "name": "Frame Statistics",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6"
    },
    {
        "id": "675036dd.603328",
        "type": "ui_group",
        "name": "Frame Grab",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "ac133c3c.7c708",
        "type": "ui_group",
        "z": "e276300d7cbaa457",
        "name": "Default",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "34247234f0668477",
        "type": "function",
        "z": "7f5b70e481620d6e",
        "name": "Check if we're getting valid readings",
        "func": "\n/* ASSUMPTIONS:\n- Humidity should read at least greater than 30 (percent) and less than or equal to 100.\n- Temperature should read at least greater than 50 (degrees F) and less than 100 degrees F.\n- CO2 level should read at least 350 (ppm) and less than 1800.\n*/\n\n/* I did separate if statements because of the way I was finding\nerrors coming in.  If the I2C interface isn't working, there \nis a different error than if the I2C interface is working but the \nthe sensor is not.\n*/\n if (msg.payload == \"read-measurement\") {\n    node.warn(\"** Error: Check Sensor.  I2C interface is not working...\");\n    msg.payload.good_readings = false;\n    return msg;\n    \n}\nif (msg.payload.SCD30== undefined){\n    node.warn(\"** ERROR: Not getting SCD30 readings...\");\n    msg.payload.good_readings = false;\n    return msg;\n}\n/* Convert Temp reading to F from C */\nmsg.payload.SCD30.Temperature = msg.payload.SCD30.Temperature*9/5 + 32;\n/* The Sensor could be sending bad readings */\n\nif (isNaN(msg.payload.SCD30.CarbonDioxide) ){\n    node.warn(\"** ERROR: Check Sensor. Not getting valid readings. ..\");\n    msg.payload.good_readings = false;\n    \n}else if (msg.payload.SCD30.Humidity < 30 || msg.payload.SCD30.Humidity > 100){\n    node.warn(\"** ERROR: Check Sensor. Humidity reading is \"+msg.payload.Humidity);\n    msg.payload.good_readings = false;\n}else if (msg.payload.SCD30.Temperature < 50 || msg.payload.SCD30.Temperature > 90){\n    node.warn(\"** ERROR: Check Sensor. Temperature reading is \"+msg.payload.SCD30.Temperature);\n    msg.payload.good_readings = false;\n}else if (msg.payload.SCD30.CarbonDioxide < 350 || msg.payload.SCD30.CarbonDioxide > 1800){\n    node.warn(\"** ERROR: Check Sensor. CO2 level reading is \"+msg.payload.SCD30.CarbonDioxide);\n    msg.payload.good_readings = false;\n}\nelse {\n    msg.payload.good_readings = true;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 100,
        "wires": [
            [
                "3c657af948247c47"
            ]
        ],
        "inputLabels": [
            "Unvalidated Sensor Readings"
        ],
        "outputLabels": [
            "Validated Sensor readings"
        ]
    },
    {
        "id": "3c657af948247c47",
        "type": "switch",
        "z": "7f5b70e481620d6e",
        "name": "true if we are getting readings",
        "property": "payload.good_readings",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 100,
        "wires": [
            [
                "96ad718c50324646"
            ],
            [
                "232789a045a98448"
            ]
        ]
    },
    {
        "id": "23104b00346c1d1f",
        "type": "change",
        "z": "7f5b70e481620d6e",
        "name": "set snifferBuddy_working to true",
        "rules": [
            {
                "t": "set",
                "p": "snifferBuddy_working",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1190,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "232789a045a98448",
        "type": "change",
        "z": "7f5b70e481620d6e",
        "name": "add 1 to n_bad_readings",
        "rules": [
            {
                "t": "set",
                "p": "n_bad_readings",
                "pt": "flow",
                "to": "$flowContext(\"n_bad_readings\")+1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 160,
        "wires": [
            [
                "7c2d03e0b4809e9e",
                "5c0e2f583f51111c"
            ]
        ]
    },
    {
        "id": "7c2d03e0b4809e9e",
        "type": "switch",
        "z": "7f5b70e481620d6e",
        "name": "n_bad_readings > 3?",
        "property": "n_bad_readings",
        "propertyType": "flow",
        "rules": [
            {
                "t": "gt",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1220,
        "y": 100,
        "wires": [
            [
                "5746a4c7a8a82e23"
            ]
        ]
    },
    {
        "id": "5c0e2f583f51111c",
        "type": "function",
        "z": "7f5b70e481620d6e",
        "name": "print n_bad_readings",
        "func": "msg.payload = \"number of bad readings: \" + flow.get(\"n_bad_readings\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 200,
        "wires": [
            [
                "4408918677e3640b"
            ]
        ]
    },
    {
        "id": "4408918677e3640b",
        "type": "debug",
        "z": "7f5b70e481620d6e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 200,
        "wires": []
    },
    {
        "id": "96ad718c50324646",
        "type": "change",
        "z": "7f5b70e481620d6e",
        "name": "set n_bad_readings to 0",
        "rules": [
            {
                "t": "set",
                "p": "n_bad_readings",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 40,
        "wires": [
            [
                "23104b00346c1d1f"
            ]
        ]
    },
    {
        "id": "5746a4c7a8a82e23",
        "type": "change",
        "z": "7f5b70e481620d6e",
        "name": "set snifferBuddy_working to false",
        "rules": [
            {
                "t": "set",
                "p": "snifferBuddy_working",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1520,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "a0ea1b32b045e152",
        "type": "config",
        "z": "7f5b70e481620d6e",
        "name": "State Variables",
        "properties": [
            {
                "p": "n_bad_readings",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "active": true,
        "x": 460,
        "y": 40,
        "wires": []
    },
    {
        "id": "35956015b760807c",
        "type": "debug",
        "z": "7f5b70e481620d6e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 210,
        "y": 220,
        "wires": []
    },
    {
        "id": "ea57ab63d4689d43",
        "type": "debug",
        "z": "299ed8b77420c170",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 280,
        "wires": []
    },
    {
        "id": "73136c801db1d7fa",
        "type": "change",
        "z": "299ed8b77420c170",
        "name": "CO2",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.SCD30.CarbonDioxide",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "CO2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 240,
        "wires": [
            [
                "715ab9fd33f18591"
            ]
        ]
    },
    {
        "id": "ab4f06407c0edae6",
        "type": "change",
        "z": "299ed8b77420c170",
        "name": "Humidity",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.SCD30.Humidity",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Humidity",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 300,
        "wires": [
            [
                "715ab9fd33f18591"
            ]
        ]
    },
    {
        "id": "715ab9fd33f18591",
        "type": "join",
        "z": "299ed8b77420c170",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 620,
        "y": 280,
        "wires": [
            [
                "ea57ab63d4689d43",
                "c756ccc1259c0c8d"
            ]
        ]
    },
    {
        "id": "6d28b3d4d68d0354",
        "type": "change",
        "z": "299ed8b77420c170",
        "name": "Temperature",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.SCD30.Temperature",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Temperature",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 360,
        "wires": [
            [
                "715ab9fd33f18591"
            ]
        ]
    },
    {
        "id": "c756ccc1259c0c8d",
        "type": "influxdb out",
        "z": "299ed8b77420c170",
        "influxdb": "ab7d13904246734b",
        "name": "snifferbuddy readings to influxdb",
        "measurement": "readings",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 880,
        "y": 360,
        "wires": []
    },
    {
        "id": "30145a16f0cec555",
        "type": "function",
        "z": "299ed8b77420c170",
        "name": "calc VPD",
        "func": "var air_T = msg.payload.SCD30.Temperature;\n/* Assume leaf temp is 2 degrees F less */\nvar leaf_T = air_T - 2;\nvar RH = msg.payload.SCD30.Humidity;\n\n/* see https://www.questclimate.com/vapor-pressure-deficit-indoor-growing-part-3-different-stages-vpd/ */\nleaf_vpd = 3.386*(Math.exp(17.863-9621/(leaf_T+460))-((RH/100)*Math.exp(17.863-9621/(air_T+460))));\nmsg.payload = Number(leaf_vpd.toFixed(2));\nmsg.topic = \"vpd\"\nflow.set(\"vpd\",msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 420,
        "wires": [
            [
                "715ab9fd33f18591"
            ]
        ]
    },
    {
        "id": "4724912cabff749a",
        "type": "config",
        "z": "b2b2cf3fbcec5eed",
        "name": "Sniffer Buddy Variables",
        "properties": [
            {
                "p": "CO2_level",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "p": "Temperature",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "p": "Humidity",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            },
            {
                "p": "CONST_LIGHT_ON_OFF_THRESHOLD",
                "pt": "flow",
                "to": "700",
                "tot": "num"
            }
        ],
        "active": true,
        "x": 310,
        "y": 80,
        "wires": []
    },
    {
        "id": "627d37df22406854",
        "type": "config",
        "z": "b2b2cf3fbcec5eed",
        "name": "Global Variables",
        "properties": [
            {
                "p": "snifferBuddy_working",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "active": true,
        "x": 640,
        "y": 80,
        "wires": []
    },
    {
        "id": "5a3e1a02488e5602",
        "type": "inject",
        "z": "b2b2cf3fbcec5eed",
        "name": "PPFD Settings",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"PPFD\":{\"week1\":100,\"week2\":250,\"week3\":300,\"week4\":500,\"week5\":650}}",
        "payloadType": "json",
        "x": 860,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6128f7ed51f44173",
        "type": "change",
        "z": "b2b2cf3fbcec5eed",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "f581f181cd9850c5",
        "type": "mqtt in",
        "z": "b2b2cf3fbcec5eed",
        "g": "dd5b4280471fc9a9",
        "name": "Sniffer Buddy readings",
        "topic": "tele/snifferbuddy/SENSOR",
        "qos": "2",
        "datatype": "auto",
        "broker": "77fed1c377eed3df",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 320,
        "wires": [
            [
                "16f1e159dc4f3e84"
            ]
        ]
    },
    {
        "id": "bc065d6677b1f46b",
        "type": "subflow:7f5b70e481620d6e",
        "z": "b2b2cf3fbcec5eed",
        "g": "dd5b4280471fc9a9",
        "name": "",
        "x": 470,
        "y": 320,
        "wires": [
            [
                "504e5db12d254cbb"
            ]
        ]
    },
    {
        "id": "16f1e159dc4f3e84",
        "type": "json",
        "z": "b2b2cf3fbcec5eed",
        "g": "dd5b4280471fc9a9",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 320,
        "wires": [
            [
                "bc065d6677b1f46b",
                "60d37fa549693ae8"
            ]
        ]
    },
    {
        "id": "6a9a0ec21f3d6810",
        "type": "change",
        "z": "b2b2cf3fbcec5eed",
        "g": "dd5b4280471fc9a9",
        "name": "set flow Variables",
        "rules": [
            {
                "t": "set",
                "p": "CO2",
                "pt": "flow",
                "to": "payload.SCD30.CarbonDioxide",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "Humidity",
                "pt": "flow",
                "to": "payload.SCD30.Humidity",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "Temperature",
                "pt": "flow",
                "to": "payload.SCD30.Temperature",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "Light_ONorOFF",
                "pt": "flow",
                "to": "payload.ANALOG.A0 > $flowContext(\"CONST_LIGHT_ON_OFF_THRESHOLD\") ? \"ON\" : \"OFF\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 320,
        "wires": [
            [
                "fbeb377931dbc8e2"
            ]
        ]
    },
    {
        "id": "840d20f7b8b2844b",
        "type": "mqtt in",
        "z": "b2b2cf3fbcec5eed",
        "g": "dd5b4280471fc9a9",
        "name": "Sniffer Buddy LWT",
        "topic": "tele/snifferbuddy/LWT",
        "qos": "2",
        "datatype": "auto",
        "broker": "77fed1c377eed3df",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 420,
        "wires": [
            [
                "07098a2be29dd344"
            ]
        ]
    },
    {
        "id": "fbeb377931dbc8e2",
        "type": "change",
        "z": "b2b2cf3fbcec5eed",
        "g": "dd5b4280471fc9a9",
        "name": "put LED on/off in msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Light_ONorOFF",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 320,
        "wires": [
            [
                "b6f864048abe85d4"
            ]
        ]
    },
    {
        "id": "b6f864048abe85d4",
        "type": "rbe",
        "z": "b2b2cf3fbcec5eed",
        "g": "dd5b4280471fc9a9",
        "name": "Block unless LED on/off changes",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1080,
        "y": 380,
        "wires": [
            [
                "f41c631bb0e33bf4",
                "e8c381448de3c5aa"
            ]
        ]
    },
    {
        "id": "07098a2be29dd344",
        "type": "function",
        "z": "b2b2cf3fbcec5eed",
        "g": "dd5b4280471fc9a9",
        "name": "Check if getting mqtt readings.",
        "func": "if (msg.payload == 'Online') {\n    node.warn(\"***> INFO: receiving readings from Sniffer Buddy.\");\n} else {\n    node.warn(\"***> ERROR: UhOh! Not receiving readings from Sniffer Buddy\");\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 420,
        "wires": [
            [
                "573be0a2b1ea622e"
            ]
        ]
    },
    {
        "id": "f41c631bb0e33bf4",
        "type": "e-mail",
        "z": "b2b2cf3fbcec5eed",
        "d": true,
        "g": "dd5b4280471fc9a9",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "happyday.mjohnson@gmail.com",
        "dname": "Send Lights ON/OFF email",
        "x": 1300,
        "y": 440,
        "wires": []
    },
    {
        "id": "504e5db12d254cbb",
        "type": "switch",
        "z": "b2b2cf3fbcec5eed",
        "g": "dd5b4280471fc9a9",
        "name": "snifferBuddy_working?",
        "property": "snifferBuddy_working",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 320,
        "wires": [
            [
                "6a9a0ec21f3d6810",
                "863490e53bc7a204"
            ],
            [
                "6c18c78d2e27e1d1"
            ]
        ]
    },
    {
        "id": "eb121a6b1c64fc57",
        "type": "e-mail",
        "z": "b2b2cf3fbcec5eed",
        "d": true,
        "g": "dd5b4280471fc9a9",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "happyday.mjohnson@gmail.com",
        "dname": "Send not working email",
        "x": 1030,
        "y": 440,
        "wires": []
    },
    {
        "id": "6c18c78d2e27e1d1",
        "type": "change",
        "z": "b2b2cf3fbcec5eed",
        "g": "dd5b4280471fc9a9",
        "name": "set msg to SnifferBuddy not working.",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "UHOH!!! SnifferBuddy is not working",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 380,
        "wires": [
            [
                "eb121a6b1c64fc57"
            ]
        ]
    },
    {
        "id": "91d6114c8d9f582b",
        "type": "change",
        "z": "b2b2cf3fbcec5eed",
        "g": "dd5b4280471fc9a9",
        "name": "handle mqtt broker down.",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "UHOH!!! Not receiving messages from SnifferBuddy!",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "snifferBuddy_working",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 480,
        "wires": [
            [
                "eb121a6b1c64fc57"
            ]
        ]
    },
    {
        "id": "573be0a2b1ea622e",
        "type": "switch",
        "z": "b2b2cf3fbcec5eed",
        "g": "dd5b4280471fc9a9",
        "name": "are messages being sent?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Online",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 680,
        "y": 420,
        "wires": [
            [
                "91d6114c8d9f582b"
            ]
        ]
    },
    {
        "id": "863490e53bc7a204",
        "type": "subflow:299ed8b77420c170",
        "z": "b2b2cf3fbcec5eed",
        "g": "dd5b4280471fc9a9",
        "name": "",
        "x": 1110,
        "y": 260,
        "wires": []
    },
    {
        "id": "e8c381448de3c5aa",
        "type": "influxdb out",
        "z": "b2b2cf3fbcec5eed",
        "g": "dd5b4280471fc9a9",
        "influxdb": "ab7d13904246734b",
        "name": "record light on/off event in influxdb",
        "measurement": "light",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 1400,
        "y": 380,
        "wires": []
    },
    {
        "id": "60d37fa549693ae8",
        "type": "debug",
        "z": "b2b2cf3fbcec5eed",
        "d": true,
        "g": "dd5b4280471fc9a9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 380,
        "wires": []
    },
    {
        "id": "14f5cd67.1fbd6b",
        "type": "ui_template",
        "z": "a7f76a515c8544a2",
        "group": "bbc3532f.41ca7",
        "name": "Temp and Humidity Grafana",
        "order": 10,
        "width": 8,
        "height": 8,
        "format": "<html>\n<iframe id=\"scd30Frame\" width=\"400px\" height=\"350px\" style = \"overflow:hidden; margin:auto; border:0px solid blue;\"></iframe>\n\n<script>\n//NOTE, more then one chart on a page, rename in the second and following \n//templates the \"myframe\" variable so that every template has a unique name.\n(function(scope) {\n    // watch msg object from Node-RED\n    scope.$watch('msg', function(msg) {\n        // new message received\n        var x = document.getElementById('scd30Frame');\n        x.setAttribute('src', msg.payload); \n        });\n})(scope);\n</script>\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1340,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "aeaaadf4.7dcb",
        "type": "function",
        "z": "a7f76a515c8544a2",
        "name": "Build SCD30 Template",
        "func": "//NOTE, more then one chart on a page, rename in the second and following \n//templates the \"myframe\" variable so that every template has a unique name.\n\npanelid=2\n\nmsg.payload= \"http://growbuddy:3000/d/7ZzVJ2mRk/snifferbuddy-thv?orgId=1\"+\n\"&refresh=1m\"+\n\"&theme=dark\"+\n\"&from=\"+ msg.fromdate +\n\"&to=\"+ msg.enddate +\n\"&panelId=\"+panelid +\n\"&kiosk\"\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 440,
        "wires": [
            [
                "14f5cd67.1fbd6b",
                "11c2075d1462ed51"
            ]
        ]
    },
    {
        "id": "a4654193.3b49e8",
        "type": "function",
        "z": "a7f76a515c8544a2",
        "name": "SetTimeTodaySofar",
        "func": "msg.fromdate = \"now/d\";\nmsg.enddate = \"now\";\nflow.set(\"date_offset\",0);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 500,
        "wires": [
            [
                "aeaaadf4.7dcb",
                "4d9c0d995889eeec",
                "445ee39e69ac2c9d"
            ]
        ]
    },
    {
        "id": "b86713b9963a29c4",
        "type": "ui_ui_control",
        "z": "a7f76a515c8544a2",
        "name": "Page loads",
        "events": "connect",
        "x": 570,
        "y": 500,
        "wires": [
            [
                "a4654193.3b49e8"
            ]
        ]
    },
    {
        "id": "a82f23f8e4fcc4ed",
        "type": "ui_button",
        "z": "a7f76a515c8544a2",
        "name": "<< button",
        "group": "bbc3532f.41ca7",
        "order": 2,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "<<",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "-1",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 220,
        "y": 420,
        "wires": [
            [
                "c98e9cae51e15458",
                "dd5f9c2446c06495"
            ]
        ]
    },
    {
        "id": "0a3f2c79e6afd0ab",
        "type": "ui_button",
        "z": "a7f76a515c8544a2",
        "name": "Today button",
        "group": "bbc3532f.41ca7",
        "order": 8,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Today",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 550,
        "y": 540,
        "wires": [
            [
                "a4654193.3b49e8"
            ]
        ]
    },
    {
        "id": "c98e9cae51e15458",
        "type": "function",
        "z": "a7f76a515c8544a2",
        "name": "set flow.date_offset",
        "func": "node.warn(\"msg.payload: \" + msg.payload);\nlet date_offset = flow.get(\"date_offset\");\nif ( (msg.payload == 0) || (date_offset+msg.payload > 0)) {\n    flow.set(\"date_offset\",0);\n}else{\n    flow.set(\"date_offset\",date_offset+msg.payload);\n}\nnode.warn(\"date offset: \" + flow.get(\"date_offset\"));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 420,
        "wires": [
            [
                "0a0bd043a814bf0a"
            ]
        ]
    },
    {
        "id": "0a0bd043a814bf0a",
        "type": "function",
        "z": "a7f76a515c8544a2",
        "name": "Set From and end Date/Time",
        "func": "var p_30d  = 1000*60*60*24*30 ; //30 Days\nvar p_7d  = 1000*60*60*24*7 ; //7 Days\nvar p_1d   =  1000*60*60*24 ; // 1 Day\nvar p_hr = 1000*60*60; //1 Hour\n\nvar d = new Date();\nvar today0h = d.setHours(0,0,0,0); //Timestamp midnight\n\n\n/* Date Offset is negative to show days previous from today */\nmsg.fromdate = today0h + flow.get(\"date_offset\")*p_1d;\nmsg.enddate = msg.fromdate + p_1d;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 440,
        "wires": [
            [
                "aeaaadf4.7dcb",
                "445ee39e69ac2c9d"
            ]
        ]
    },
    {
        "id": "fd90d91defb2be37",
        "type": "ui_button",
        "z": "a7f76a515c8544a2",
        "name": ">> button",
        "group": "bbc3532f.41ca7",
        "order": 6,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": ">>",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 320,
        "y": 540,
        "wires": [
            [
                "c98e9cae51e15458",
                "4d9c0d995889eeec"
            ]
        ]
    },
    {
        "id": "4d9c0d995889eeec",
        "type": "change",
        "z": "a7f76a515c8544a2",
        "name": ">> off",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "($flowContext(\"date_offset\") = 0 )? false : true",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 660,
        "wires": [
            [
                "fd90d91defb2be37"
            ]
        ]
    },
    {
        "id": "dd5f9c2446c06495",
        "type": "change",
        "z": "a7f76a515c8544a2",
        "name": ">> on",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 480,
        "wires": [
            [
                "fd90d91defb2be37"
            ]
        ]
    },
    {
        "id": "11c2075d1462ed51",
        "type": "change",
        "z": "a7f76a515c8544a2",
        "name": "set date string",
        "rules": [
            {
                "t": "set",
                "p": "fromdate",
                "pt": "msg",
                "to": "(\t\t$contains($string(msg.fromdate), \"now\") ? $now( '[M]/[D]/[Y]') : $fromMillis(msg.fromdate,'[M]/[D]/[Y]')\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 400,
        "wires": [
            [
                "42ccb0ac682f545e"
            ]
        ]
    },
    {
        "id": "42ccb0ac682f545e",
        "type": "ui_text",
        "z": "a7f76a515c8544a2",
        "group": "bbc3532f.41ca7",
        "order": 4,
        "width": 2,
        "height": 1,
        "name": "date text field",
        "label": "",
        "format": "{{msg.fromdate}}",
        "layout": "col-center",
        "className": "",
        "x": 1470,
        "y": 400,
        "wires": []
    },
    {
        "id": "d8bd7de23f9706cd",
        "type": "ui_template",
        "z": "a7f76a515c8544a2",
        "group": "bbc3532f.41ca7",
        "name": "CO2 Grafana",
        "order": 11,
        "width": 8,
        "height": 8,
        "format": "<html>\n<iframe id=\"co2Frame\" width=\"400px\" height=\"350px\" style = \"overflow:hidden; margin:auto; border:0px solid blue;\"></iframe>\n\n<script>\n//NOTE, more then one chart on a page, rename in the second and following \n//templates the \"myframe\" variable so that every template has a unique name.\n(function(scope) {\n    // watch msg object from Node-RED\n    scope.$watch('msg', function(msg) {\n        // new message received\n        var x = document.getElementById('co2Frame');\n        x.setAttribute('src', msg.payload); \n        });\n})(scope);\n</script>\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1290,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "445ee39e69ac2c9d",
        "type": "function",
        "z": "a7f76a515c8544a2",
        "name": "Build CO2 Template",
        "func": "//NOTE, more then one chart on a page, rename in the second and following \n//templates the \"myframe\" variable so that every template has a unique name.\n\npanelid=2\n\nmsg.payload= \"http://growbuddy:3000/d/b-XXf-iRk/co2?orgId=1\"+\n\"&refresh=1m\"+\n\"&theme=dark\"+\n\"&from=\"+ msg.fromdate +\n\"&to=\"+ msg.enddate +\n\"&panelId=\"+panelid +\n\"&kiosk\"\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 480,
        "wires": [
            [
                "d8bd7de23f9706cd"
            ]
        ]
    },
    {
        "id": "ab74bfa7363017be",
        "type": "inject",
        "z": "a7f76a515c8544a2",
        "name": "add PPFD Settings to msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"PPFD\":[100,250,300,500,650]}",
        "payloadType": "json",
        "x": 820,
        "y": 640,
        "wires": [
            [
                "ade35990ba74f235"
            ]
        ]
    },
    {
        "id": "ade35990ba74f235",
        "type": "debug",
        "z": "a7f76a515c8544a2",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 700,
        "wires": []
    },
    {
        "id": "9cd9bf5fb4272ccc",
        "type": "config",
        "z": "e276300d7cbaa457",
        "d": true,
        "name": "",
        "properties": [
            {
                "p": "date_offset",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "active": true,
        "x": 710,
        "y": 140,
        "wires": []
    },
    {
        "id": "6cd204e8bf49a58c",
        "type": "ui_date_picker",
        "z": "e276300d7cbaa457",
        "name": "",
        "label": "Start Date:",
        "group": "7a0c3262d7dd5dc0",
        "order": 1,
        "width": 2,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 490,
        "y": 420,
        "wires": [
            [
                "d464c762581695b0",
                "22e85440c0f67164"
            ]
        ]
    },
    {
        "id": "d382c68206a2053e",
        "type": "ui_text",
        "z": "e276300d7cbaa457",
        "group": "7a0c3262d7dd5dc0",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Time Growing",
        "format": "{{msg.payload.datetimestr}}",
        "layout": "col-center",
        "className": "",
        "x": 840,
        "y": 620,
        "wires": []
    },
    {
        "id": "0abe4059e55ce07c",
        "type": "inject",
        "z": "e276300d7cbaa457",
        "name": "add PPFD Settings to msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"PPFD\":[100,250,300,500,650]}",
        "payloadType": "json",
        "x": 280,
        "y": 740,
        "wires": [
            [
                "6d3c0fd9f0011a14"
            ]
        ]
    },
    {
        "id": "6d3c0fd9f0011a14",
        "type": "function",
        "z": "e276300d7cbaa457",
        "name": "set payload to this week's PPFD value",
        "func": "\nmsg.payload = msg.payload.PPFD[flow.get(\"weeks\")-1];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 740,
        "wires": [
            [
                "340c4f220b6068d2"
            ]
        ]
    },
    {
        "id": "340c4f220b6068d2",
        "type": "ui_text",
        "z": "e276300d7cbaa457",
        "group": "7a0c3262d7dd5dc0",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "PPFD Setpoint",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 940,
        "y": 740,
        "wires": []
    },
    {
        "id": "5cfb8d7a44b7e879",
        "type": "inject",
        "z": "e276300d7cbaa457",
        "name": "Add vpd settings to msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "vpd",
        "payload": "{\t    \"vpd\": {\t        \"veg_min\":0.80,\t        \"veg_max\":0.95,\t        \"flower_min\":0.96,\t        \"flower_max\":1.15\t    }\t}",
        "payloadType": "jsonata",
        "x": 270,
        "y": 840,
        "wires": [
            [
                "5831e67647a86ff2"
            ]
        ]
    },
    {
        "id": "ad1fd26f721c87fc",
        "type": "inject",
        "z": "e276300d7cbaa457",
        "name": "send in flow.grow_start_date to datepicker",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "start_date",
        "payload": "grow_start_date",
        "payloadType": "flow",
        "x": 220,
        "y": 420,
        "wires": [
            [
                "6cd204e8bf49a58c"
            ]
        ]
    },
    {
        "id": "d4f2d9a5.a90858",
        "type": "ui_template",
        "z": "e276300d7cbaa457",
        "d": true,
        "group": "ac133c3c.7c708",
        "name": "",
        "order": 1,
        "width": "",
        "height": "",
        "format": "<div>\n   <md-datepicker ng-model=\"myDate\" md-placeholder=\"Enter date\" ng-change=\"send({payload: myDate})\"></md-datepicker>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1000,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "9f0e3b83acc88407",
        "type": "influxdb out",
        "z": "e276300d7cbaa457",
        "influxdb": "ab7d13904246734b",
        "name": "insert grow start date",
        "measurement": "config",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 960,
        "y": 420,
        "wires": []
    },
    {
        "id": "d464c762581695b0",
        "type": "change",
        "z": "e276300d7cbaa457",
        "name": "set influx insert",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   \"start_date\" : msg.payload,\t   \"time\": $flowContext(\"date_config_added\")\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 420,
        "wires": [
            [
                "9f0e3b83acc88407"
            ]
        ]
    },
    {
        "id": "fd15d2ea2e9cdc36",
        "type": "influxdb in",
        "z": "e276300d7cbaa457",
        "influxdb": "ab7d13904246734b",
        "name": "Get start_date entry from config table in influxdb.",
        "query": "SELECT * from config",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 520,
        "y": 320,
        "wires": [
            [
                "a936166a8bead6f2"
            ]
        ]
    },
    {
        "id": "284783931ebc6d6a",
        "type": "inject",
        "z": "e276300d7cbaa457",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 210,
        "y": 320,
        "wires": [
            [
                "fd15d2ea2e9cdc36"
            ]
        ]
    },
    {
        "id": "80b6edcdbd2471c0",
        "type": "debug",
        "z": "e276300d7cbaa457",
        "name": "show flow values",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 320,
        "wires": []
    },
    {
        "id": "504cd824a0c89f12",
        "type": "change",
        "z": "e276300d7cbaa457",
        "name": "set flow.grow_start_date and flow.date_config_added",
        "rules": [
            {
                "t": "set",
                "p": "grow_start_date",
                "pt": "flow",
                "to": "payload[0].start_date",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "date_config_added",
                "pt": "flow",
                "to": "payload[0].time",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t    \"start_date\":$flowContext(\"grow_start_date\"),\t    \"time\":$flowContext(\"date_config_added\")\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 300,
        "wires": [
            [
                "80b6edcdbd2471c0"
            ]
        ]
    },
    {
        "id": "386d14dca405cbc3",
        "type": "comment",
        "z": "e276300d7cbaa457",
        "name": "Get the grow_start_date from influx and store in flow.grow_start_date",
        "info": "",
        "x": 540,
        "y": 260,
        "wires": []
    },
    {
        "id": "153701809f87fc0f",
        "type": "comment",
        "z": "e276300d7cbaa457",
        "name": "Set up the start date UI. Update flow.grow_start_date and config table in influxdb if another start date is chosen.",
        "info": "",
        "x": 670,
        "y": 380,
        "wires": []
    },
    {
        "id": "a936166a8bead6f2",
        "type": "switch",
        "z": "e276300d7cbaa457",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 320,
        "wires": [
            [
                "504cd824a0c89f12"
            ],
            []
        ]
    },
    {
        "id": "22e85440c0f67164",
        "type": "change",
        "z": "e276300d7cbaa457",
        "name": "set flow.grow_date_start",
        "rules": [
            {
                "t": "set",
                "p": "grow_start_date",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "118fc95ef4b75ff1",
        "type": "comment",
        "z": "e276300d7cbaa457",
        "name": "Figure out the number of weeks/days have passed since flow.grow_start_date",
        "info": "",
        "x": 570,
        "y": 520,
        "wires": []
    },
    {
        "id": "3b3a6ac8f5c1ce19",
        "type": "inject",
        "z": "e276300d7cbaa457",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 230,
        "y": 580,
        "wires": [
            [
                "e31c34c23ffe518b"
            ]
        ]
    },
    {
        "id": "e31c34c23ffe518b",
        "type": "function",
        "z": "e276300d7cbaa457",
        "name": "figure out weeks/days since start of grow",
        "func": "\nvar oneDay = 1000*60*60*24;\n\n\nconsole.log(Math.floor((diff/oneDay)/7) + \" weeks, \" + Math.floor((diff/oneDay)%7) + \" days\")\nvar date_today = new Date();\nvar date_grow_start = new Date(flow.get(\"grow_start_date\")+1000);\n// To calculate the time difference of two dates\nvar diff = date_today.getTime() - date_grow_start.getTime();\nnode.warn(\"time diff: \" + diff);\n// To calculate the no. of days between two dates\nmsg.payload = {\n    \"weeks\": Math.floor((diff/oneDay)/7),\n    \"days\" : Math.floor((diff/oneDay)%7),\n    \"datetimestr\": Math.floor((diff/oneDay)/7) + \" weeks, \" + Math.floor((diff/oneDay)%7) + \" days\"\n}\n\nnode.warn(Math.floor((diff/oneDay)/7) + \" weeks, \" + Math.floor((diff/oneDay)%7) + \" days\")\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 580,
        "wires": [
            [
                "c4c97650370840c8",
                "d382c68206a2053e"
            ]
        ]
    },
    {
        "id": "c4c97650370840c8",
        "type": "change",
        "z": "e276300d7cbaa457",
        "name": "set flow.weeks, flow.days,flow.growth_stage",
        "rules": [
            {
                "t": "set",
                "p": "weeks",
                "pt": "flow",
                "to": "payload.weeks",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "days",
                "pt": "flow",
                "to": "payload.days",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t    \"weeks\":$flowContext(\"weeks\"),\t    \"days\":$flowContext(\"days\"),\t    \"growth_stage\":$flowContext(\"growth_stage\")\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "growth_stage",
                "pt": "flow",
                "to": "(\tpayload.weeks < 3 ? \"baby\" : payload.weeks < 9 ? \"veg\" : \"flower\";\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 580,
        "wires": [
            [
                "ef6f5d14aa8d0abb",
                "23cd491833e7aa2f"
            ]
        ]
    },
    {
        "id": "ef6f5d14aa8d0abb",
        "type": "debug",
        "z": "e276300d7cbaa457",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 560,
        "wires": []
    },
    {
        "id": "c833e3acfc263e2b",
        "type": "comment",
        "z": "e276300d7cbaa457",
        "name": "Add PPFD and vpd recommendations",
        "info": "",
        "x": 450,
        "y": 680,
        "wires": []
    },
    {
        "id": "f2f31efacf7ce175",
        "type": "comment",
        "z": "e276300d7cbaa457",
        "name": "Set the growth stage to be either baby, veg, or flower.",
        "info": "",
        "x": 1280,
        "y": 640,
        "wires": []
    },
    {
        "id": "23cd491833e7aa2f",
        "type": "ui_text",
        "z": "e276300d7cbaa457",
        "group": "7a0c3262d7dd5dc0",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Growth Stage",
        "format": "{{msg.payload.growth_stage}}",
        "layout": "col-center",
        "className": "",
        "x": 1240,
        "y": 600,
        "wires": []
    },
    {
        "id": "5831e67647a86ff2",
        "type": "function",
        "z": "e276300d7cbaa457",
        "name": "Figure out \"best\" VPD range.",
        "func": "if (flow.get(\"growth_stage\") != \"flower\") {\n    vpd_min = msg.payload.vpd.veg_min;\n    vpd_max = msg.payload.vpd.veg_max;\n}else {\n    vpd_min = msg.payload.vpd.flower_min;\n    vpd_max = msg.payload.vpd.flower_max; \n}\nmsg.payload = \"min: \" + vpd_min + \" max: \" + vpd_max;\nnode.warn(vpd_min);\nnode.warn(vpd_max);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 840,
        "wires": [
            [
                "1fc59d5e8568ee86"
            ]
        ]
    },
    {
        "id": "1fc59d5e8568ee86",
        "type": "ui_text",
        "z": "e276300d7cbaa457",
        "group": "7a0c3262d7dd5dc0",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Ideal VPD Range",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 870,
        "y": 840,
        "wires": []
    },
    {
        "id": "68daa8883d202e0f",
        "type": "Sonoff device Enhanced",
        "z": "f8b9694fdc50d17f",
        "mode": "0",
        "broker": "77fed1c377eed3df",
        "device": "plug_fillerup",
        "name": "TEST",
        "onValue": "ON",
        "offValue": "OFF",
        "toggleValue": "toggle",
        "cmdPrefix": "cmnd",
        "statPrefix": "stat",
        "telePrefix": "tele",
        "x": 570,
        "y": 200,
        "wires": [
            [
                "f788a23cb2f3d135"
            ]
        ]
    },
    {
        "id": "89e101f62bed5943",
        "type": "inject",
        "z": "f8b9694fdc50d17f",
        "name": "TOGGLE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cmnd/plug_fillerup/POWER",
        "payload": "toggle",
        "payloadType": "str",
        "x": 220,
        "y": 220,
        "wires": [
            [
                "68daa8883d202e0f"
            ]
        ]
    },
    {
        "id": "f788a23cb2f3d135",
        "type": "debug",
        "z": "f8b9694fdc50d17f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 200,
        "wires": []
    },
    {
        "id": "6b5d09d46f1c0f6c",
        "type": "inject",
        "z": "f8b9694fdc50d17f",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cmnd/plug_fillerup/POWER",
        "payload": "on",
        "payloadType": "str",
        "x": 210,
        "y": 300,
        "wires": [
            [
                "68daa8883d202e0f"
            ]
        ]
    },
    {
        "id": "c1e1bba532566b46",
        "type": "inject",
        "z": "f8b9694fdc50d17f",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "cmnd/plug_fillerup/POWER",
        "payload": "off",
        "payloadType": "str",
        "x": 230,
        "y": 360,
        "wires": [
            [
                "68daa8883d202e0f"
            ]
        ]
    },
    {
        "id": "7298078f3ce26848",
        "type": "comment",
        "z": "f8b9694fdc50d17f",
        "name": "README",
        "info": "Example of turning on and off a Sonoff S3 or S3 lite switch.",
        "x": 270,
        "y": 140,
        "wires": []
    }
]